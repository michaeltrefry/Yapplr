name: Deploy Yapplr to Stage (Optimized)

# This workflow uses optimized deployment with conditional rebuilding
# Only rebuilds containers when source code has changed
# Always starts with fresh database

on:
  push:
    branches-ignore: [ main ]
    paths: [ 'Yapplr.Api/**', 'yapplr-frontend/**', 'sentiment-analysis/**', 'Yapplr.VideoProcessor/**', '.github/workflows/**']
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: 'Force rebuild all containers'
        required: false
        default: 'false'
        type: boolean

jobs:
  test:
    runs-on: ubuntu-latest
    name: Run Unit Tests

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: Restore dependencies
      run: dotnet restore Yapplr.Api.Tests/Yapplr.Api.Tests.csproj

    - name: Run unit tests
      run: dotnet test Yapplr.Api.Tests/Yapplr.Api.Tests.csproj --no-restore --verbosity normal

  deploy:
    runs-on: ubuntu-latest
    name: Deploy to Staging (Optimized)
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for change detection

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
        
    - name: Debug secrets
      run: |
        echo "STAGE_SERVER_HOST is set: ${{ secrets.STAGE_SERVER_HOST != '' }}"
        echo "STAGE_SERVER_USER is set: ${{ secrets.STAGE_SERVER_USER != '' }}"
        echo "STAGE_SERVER_SSH_KEY is set: ${{ secrets.STAGE_SERVER_SSH_KEY != '' }}"

    - name: Deploy to Linode
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.STAGE_SERVER_HOST }}
        username: ${{ secrets.STAGE_SERVER_USER }}
        key: ${{ secrets.STAGE_SERVER_SSH_KEY }}
        port: 22
        timeout: 60s
        envs: STAGE_POSTGRES_PASSWORD,STAGE_JWT_SECRET_KEY,STAGE_SENDGRID_API_KEY,STAGE_SENDGRID_FROM_EMAIL,STAGE_SENDGRID_FROM_NAME,STAGE_EMAIL_PROVIDER,STAGE_FIREBASE_PROJECT_ID,STAGE_FIREBASE_SERVICE_ACCOUNT_KEY,STAGE_API_DOMAIN_NAME,STAGE_CERTBOT_EMAIL,STAGE_CERTBOT_DOMAIN,STAGE_RABBITMQ_USERNAME,STAGE_RABBITMQ_PASSWORD,STAGE_REDIS_CONNECTION_STRING,STAGE_GRAFANA_USER,STAGE_GRAFANA_PASSWORD,STAGE_GRAFANA_DOMAIN,STAGE_INFLUXDB_TOKEN,STAGE_INFLUXDB_USER,STAGE_INFLUXDB_PASSWORD,STAGE_INFLUXDB_ORG,STAGE_INFLUXDB_BUCKET,STAGE_TENOR_API_KEY
        script: |
          # Navigate to existing repository directory
          cd /opt/Yapplr
          git fetch origin
          git checkout ${{ github.ref_name }}
          git pull origin ${{ github.ref_name }}

          # Create .env file with all secrets (using environment variables)
          cat > .env << EOF
          STAGE_POSTGRES_PASSWORD=${STAGE_POSTGRES_PASSWORD}
          STAGE_JWT_SECRET_KEY=${STAGE_JWT_SECRET_KEY}
          STAGE_SENDGRID_API_KEY=${STAGE_SENDGRID_API_KEY}
          STAGE_SENDGRID_FROM_EMAIL=${STAGE_SENDGRID_FROM_EMAIL}
          STAGE_SENDGRID_FROM_NAME=${STAGE_SENDGRID_FROM_NAME}
          STAGE_EMAIL_PROVIDER=${STAGE_EMAIL_PROVIDER}
          STAGE_FIREBASE_PROJECT_ID=${STAGE_FIREBASE_PROJECT_ID}
          STAGE_API_DOMAIN_NAME=${STAGE_API_DOMAIN_NAME}
          STAGE_CERTBOT_EMAIL=${STAGE_CERTBOT_EMAIL}
          STAGE_CERTBOT_DOMAIN=${STAGE_CERTBOT_DOMAIN}
          STAGE_RABBITMQ_USERNAME=${STAGE_RABBITMQ_USERNAME}
          STAGE_RABBITMQ_PASSWORD=${STAGE_RABBITMQ_PASSWORD}
          STAGE_REDIS_CONNECTION_STRING=${STAGE_REDIS_CONNECTION_STRING}
          STAGE_GRAFANA_USER=${STAGE_GRAFANA_USER}
          STAGE_GRAFANA_PASSWORD=${STAGE_GRAFANA_PASSWORD}
          STAGE_GRAFANA_DOMAIN=${STAGE_GRAFANA_DOMAIN}
          STAGE_INFLUXDB_TOKEN=${STAGE_INFLUXDB_TOKEN}
          STAGE_INFLUXDB_USER=${STAGE_INFLUXDB_USER}
          STAGE_INFLUXDB_PASSWORD=${STAGE_INFLUXDB_PASSWORD}
          STAGE_INFLUXDB_ORG=${STAGE_INFLUXDB_ORG}
          STAGE_INFLUXDB_BUCKET=${STAGE_INFLUXDB_BUCKET}
          STAGE_TENOR_API_KEY=${STAGE_TENOR_API_KEY}
          EOF

          cd /opt/Yapplr/Yapplr.Api

          # Create Firebase Service Account Key as a file
          echo "${STAGE_FIREBASE_SERVICE_ACCOUNT_KEY}" > firebase-service-account.json
          echo 'STAGE_FIREBASE_SERVICE_ACCOUNT_KEY_FILE=firebase-service-account.json' >> ../.env

          cd /opt/Yapplr

          # Set force rebuild flag if requested
          export FORCE_REBUILD=${{ github.event.inputs.force_rebuild || 'false' }}

          # Run optimized deployment
          chmod +x deploy-stage-optimized.sh
          ./deploy-stage-optimized.sh
      env:
        STAGE_POSTGRES_PASSWORD: ${{ secrets.STAGE_POSTGRES_PASSWORD }}
        STAGE_JWT_SECRET_KEY: ${{ secrets.STAGE_JWT_SECRET_KEY }}
        STAGE_SENDGRID_API_KEY: ${{ secrets.STAGE_SENDGRID_API_KEY }}
        STAGE_SENDGRID_FROM_EMAIL: ${{ secrets.STAGE_SENDGRID_FROM_EMAIL }}
        STAGE_SENDGRID_FROM_NAME: ${{ secrets.STAGE_SENDGRID_FROM_NAME }}
        STAGE_EMAIL_PROVIDER: ${{ secrets.STAGE_EMAIL_PROVIDER }}
        STAGE_FIREBASE_PROJECT_ID: ${{ secrets.STAGE_FIREBASE_PROJECT_ID }}
        STAGE_FIREBASE_SERVICE_ACCOUNT_KEY: ${{ secrets.STAGE_FIREBASE_SERVICE_ACCOUNT_KEY }}
        STAGE_API_DOMAIN_NAME: ${{ secrets.STAGE_API_DOMAIN_NAME }}
        STAGE_CERTBOT_EMAIL: ${{ secrets.STAGE_CERTBOT_EMAIL }}
        STAGE_CERTBOT_DOMAIN: ${{ secrets.STAGE_CERTBOT_DOMAIN }}
        STAGE_RABBITMQ_USERNAME: ${{ secrets.STAGE_RABBITMQ_USERNAME }}
        STAGE_RABBITMQ_PASSWORD: ${{ secrets.STAGE_RABBITMQ_PASSWORD }}
        STAGE_REDIS_CONNECTION_STRING: ${{ secrets.STAGE_REDIS_CONNECTION_STRING }}
        STAGE_GRAFANA_USER: ${{ secrets.STAGE_GRAFANA_USER }}
        STAGE_GRAFANA_PASSWORD: ${{ secrets.STAGE_GRAFANA_PASSWORD }}
        STAGE_GRAFANA_DOMAIN: ${{ secrets.STAGE_GRAFANA_DOMAIN }}
        STAGE_INFLUXDB_TOKEN: ${{ secrets.STAGE_INFLUXDB_TOKEN }}
        STAGE_INFLUXDB_USER: ${{ secrets.STAGE_INFLUXDB_USER }}
        STAGE_INFLUXDB_PASSWORD: ${{ secrets.STAGE_INFLUXDB_PASSWORD }}
        STAGE_INFLUXDB_ORG: ${{ secrets.STAGE_INFLUXDB_ORG }}
        STAGE_INFLUXDB_BUCKET: ${{ secrets.STAGE_INFLUXDB_BUCKET }}
        STAGE_TENOR_API_KEY: ${{ secrets.STAGE_TENOR_API_KEY }}

    - name: API Health Check
      run: |
        sleep 60
        curl -f https://${{ secrets.STAGE_API_DOMAIN_NAME }}/health || exit 1
