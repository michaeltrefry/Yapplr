name: Deploy Yapplr to Production (Optimized)

# This workflow uses optimized deployment with conditional rebuilding
# Only rebuilds containers when source code has changed
# PRESERVES ALL PRODUCTION DATA

on:
  push:
    branches: [ main ]
    paths: [ 'Yapplr.Api/**', 'yapplr-frontend/**', 'sentiment-analysis/**', 'Yapplr.VideoProcessor/**', '.github/workflows/**']
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: 'Force rebuild all containers'
        required: false
        default: 'false'
        type: boolean

jobs:
  test:
    runs-on: ubuntu-latest
    name: Run Unit Tests

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: Restore dependencies
      run: dotnet restore Yapplr.Api.Tests/Yapplr.Api.Tests.csproj

    - name: Run unit tests
      run: dotnet test Yapplr.Api.Tests/Yapplr.Api.Tests.csproj --no-restore --verbosity normal

  deploy:
    runs-on: ubuntu-latest
    name: Deploy to Production (Optimized)
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for change detection

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
        
    - name: Debug secrets
      run: |
        echo "PROD_SERVER_HOST is set: ${{ secrets.PROD_SERVER_HOST != '' }}"
        echo "PROD_SERVER_USER is set: ${{ secrets.PROD_SERVER_USER != '' }}"
        echo "PROD_SERVER_SSH_KEY is set: ${{ secrets.PROD_SERVER_SSH_KEY != '' }}"
        echo "PROD_DATABASE_CONNECTION_STRING is set: ${{ secrets.PROD_DATABASE_CONNECTION_STRING != '' }}"
        echo "PROD_JWT_SECRET_KEY is set: ${{ secrets.PROD_JWT_SECRET_KEY != '' }}"
        echo "PROD_SENDGRID_API_KEY is set: ${{ secrets.PROD_SENDGRID_API_KEY != '' }}"
        echo "PROD_SENDGRID_FROM_EMAIL is set: ${{ secrets.PROD_SENDGRID_FROM_EMAIL != '' }}"

    - name: Deploy to Linode
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.PROD_SERVER_HOST }}
        username: ${{ secrets.PROD_SERVER_USER }}
        key: ${{ secrets.PROD_SERVER_SSH_KEY }}
        port: 22
        timeout: 60s
        envs: PROD_DATABASE_CONNECTION_STRING,PROD_JWT_SECRET_KEY,PROD_SENDGRID_API_KEY,PROD_SENDGRID_FROM_EMAIL,PROD_SENDGRID_FROM_NAME,PROD_EMAIL_PROVIDER,PROD_FIREBASE_PROJECT_ID,PROD_FIREBASE_SERVICE_ACCOUNT_KEY,PROD_API_DOMAIN_NAME,PROD_CERTBOT_EMAIL,PROD_CERTBOT_DOMAIN,PROD_RABBITMQ_USERNAME,PROD_RABBITMQ_PASSWORD,PROD_REDIS_CONNECTION_STRING,PROD_GRAFANA_USER,PROD_GRAFANA_PASSWORD,PROD_GRAFANA_DOMAIN,PROD_INFLUXDB_TOKEN,PROD_INFLUXDB_USER,PROD_INFLUXDB_PASSWORD,PROD_INFLUXDB_ORG,PROD_INFLUXDB_BUCKET,PROD_TENOR_API_KEY,PROD_API_BASE_URL
        script: |
          # Navigate to existing repository directory
          cd /opt/Yapplr
          git pull origin main

          # Create .env file with all secrets (properly quoted to handle special characters)
          # Use printf to safely write each variable with proper quoting
          {
            printf 'PROD_DATABASE_CONNECTION_STRING="%s"\n' "${PROD_DATABASE_CONNECTION_STRING}"
            printf 'PROD_JWT_SECRET_KEY="%s"\n' "${PROD_JWT_SECRET_KEY}"
            printf 'PROD_SENDGRID_API_KEY="%s"\n' "${PROD_SENDGRID_API_KEY}"
            printf 'PROD_SENDGRID_FROM_EMAIL="%s"\n' "${PROD_SENDGRID_FROM_EMAIL}"
            printf 'PROD_SENDGRID_FROM_NAME="%s"\n' "${PROD_SENDGRID_FROM_NAME}"
            printf 'PROD_EMAIL_PROVIDER="%s"\n' "${PROD_EMAIL_PROVIDER}"
            printf 'PROD_FIREBASE_PROJECT_ID="%s"\n' "${PROD_FIREBASE_PROJECT_ID}"
            printf 'PROD_API_DOMAIN_NAME="%s"\n' "${PROD_API_DOMAIN_NAME}"
            printf 'PROD_CERTBOT_EMAIL="%s"\n' "${PROD_CERTBOT_EMAIL}"
            printf 'PROD_CERTBOT_DOMAIN="%s"\n' "${PROD_CERTBOT_DOMAIN}"
            printf 'PROD_RABBITMQ_USERNAME="%s"\n' "${PROD_RABBITMQ_USERNAME}"
            printf 'PROD_RABBITMQ_PASSWORD="%s"\n' "${PROD_RABBITMQ_PASSWORD}"
            printf 'PROD_REDIS_CONNECTION_STRING="%s"\n' "${PROD_REDIS_CONNECTION_STRING}"
            printf 'PROD_GRAFANA_USER="%s"\n' "${PROD_GRAFANA_USER}"
            printf 'PROD_GRAFANA_PASSWORD="%s"\n' "${PROD_GRAFANA_PASSWORD}"
            printf 'PROD_GRAFANA_DOMAIN="%s"\n' "${PROD_GRAFANA_DOMAIN}"
            printf 'PROD_INFLUXDB_TOKEN="%s"\n' "${PROD_INFLUXDB_TOKEN}"
            printf 'PROD_INFLUXDB_USER="%s"\n' "${PROD_INFLUXDB_USER}"
            printf 'PROD_INFLUXDB_PASSWORD="%s"\n' "${PROD_INFLUXDB_PASSWORD}"
            printf 'PROD_INFLUXDB_ORG="%s"\n' "${PROD_INFLUXDB_ORG}"
            printf 'PROD_INFLUXDB_BUCKET="%s"\n' "${PROD_INFLUXDB_BUCKET}"
            printf 'PROD_TENOR_API_KEY="%s"\n' "${PROD_TENOR_API_KEY}"
          } > .env

          cd /opt/Yapplr/Yapplr.Api
          # Create Firebase Service Account Key as a file
          printf '%s\n' "${PROD_FIREBASE_SERVICE_ACCOUNT_KEY}" > firebase-service-account.json
          printf 'PROD_FIREBASE_SERVICE_ACCOUNT_KEY_FILE="%s"\n' "firebase-service-account.json" >> ../.env

          cd /opt/Yapplr

          # Set force rebuild flag if requested
          export FORCE_REBUILD=${{ github.event.inputs.force_rebuild || 'false' }}

          # Run optimized deployment (preserves all data)
          chmod +x deploy-prod-optimized.sh
          ./deploy-prod-optimized.sh
      env:
        PROD_DATABASE_CONNECTION_STRING: ${{ secrets.PROD_DATABASE_CONNECTION_STRING }}
        PROD_JWT_SECRET_KEY: ${{ secrets.PROD_JWT_SECRET_KEY }}
        PROD_SENDGRID_API_KEY: ${{ secrets.PROD_SENDGRID_API_KEY }}
        PROD_SENDGRID_FROM_EMAIL: ${{ secrets.PROD_SENDGRID_FROM_EMAIL }}
        PROD_SENDGRID_FROM_NAME: ${{ secrets.PROD_SENDGRID_FROM_NAME }}
        PROD_EMAIL_PROVIDER: ${{ secrets.PROD_EMAIL_PROVIDER }}
        PROD_FIREBASE_PROJECT_ID: ${{ secrets.PROD_FIREBASE_PROJECT_ID }}
        PROD_FIREBASE_SERVICE_ACCOUNT_KEY: ${{ secrets.PROD_FIREBASE_SERVICE_ACCOUNT_KEY }}
        PROD_API_DOMAIN_NAME: ${{ secrets.PROD_API_DOMAIN_NAME }}
        PROD_CERTBOT_EMAIL: ${{ secrets.PROD_CERTBOT_EMAIL }}
        PROD_CERTBOT_DOMAIN: ${{ secrets.PROD_CERTBOT_DOMAIN }}
        PROD_RABBITMQ_USERNAME: ${{ secrets.PROD_RABBITMQ_USERNAME }}
        PROD_RABBITMQ_PASSWORD: ${{ secrets.PROD_RABBITMQ_PASSWORD }}
        PROD_REDIS_CONNECTION_STRING: ${{ secrets.PROD_REDIS_CONNECTION_STRING }}
        PROD_GRAFANA_USER: ${{ secrets.PROD_GRAFANA_USER }}
        PROD_GRAFANA_PASSWORD: ${{ secrets.PROD_GRAFANA_PASSWORD }}
        PROD_GRAFANA_DOMAIN: ${{ secrets.PROD_GRAFANA_DOMAIN }}
        PROD_INFLUXDB_TOKEN: ${{ secrets.PROD_INFLUXDB_TOKEN }}
        PROD_INFLUXDB_USER: ${{ secrets.PROD_INFLUXDB_USER }}
        PROD_INFLUXDB_PASSWORD: ${{ secrets.PROD_INFLUXDB_PASSWORD }}
        PROD_INFLUXDB_ORG: ${{ secrets.PROD_INFLUXDB_ORG }}
        PROD_INFLUXDB_BUCKET: ${{ secrets.PROD_INFLUXDB_BUCKET }}
        PROD_TENOR_API_KEY: ${{ secrets.PROD_TENOR_API_KEY }}

    - name: API Health Check
      run: |
        sleep 30
        curl -f https://${{ secrets.PROD_API_DOMAIN_NAME }}/health || exit 1
