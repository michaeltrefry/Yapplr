services:
  yapplr-api:
    build:
      context: .
      dockerfile: Yapplr.Api/Dockerfile
    image: yapplr-api:local
    ports:
      - "8080:8080"  # Expose API for local access
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=yapplr_db;Username=postgres;Password=localdev123
      - JwtSettings__SecretKey=your-super-secret-jwt-key-that-should-be-at-least-32-characters-long-for-local-dev
      - JwtSettings__Issuer=Yapplr.Api
      - JwtSettings__Audience=Yapplr.Client
      - JwtSettings__ExpirationInMinutes=60
      # SendGrid configuration (optional for local)
      - SendGridSettings__ApiKey=SG.dummy-key-for-local-development
      - SendGridSettings__FromEmail=noreply@yapplr.local
      - SendGridSettings__FromName=Yapplr Local
      # Email provider selection
      - EmailProvider=Console
      # Firebase configuration (optional for local)
      - Firebase__ProjectId=yapplr-local
      - Firebase__ServiceAccountKey={}
      # Content Moderation configuration
      - ContentModeration__ServiceUrl=http://content-moderation:8000
      - ContentModeration__Enabled=true
      - ContentModeration__AutoApplyTags=false
      # RabbitMQ configuration
      - RabbitMQ__Host=rabbitmq
      - RabbitMQ__Port=5672
      - RabbitMQ__Username=yapplr
      - RabbitMQ__Password=yapplr123
      - RabbitMQ__VirtualHost=/
      # Upload configuration - override to use Docker volume path
      - Uploads__BasePath=/app/uploads
      # Redis configuration
      - Redis__ConnectionString=redis:6379
      # InfluxDB configuration
      - InfluxDB__Url=http://influxdb:8086
      - InfluxDB__Token=yapplr-analytics-token-local-dev-only
      - InfluxDB__Organization=yapplr
      - InfluxDB__Bucket=analytics
      - InfluxDB__Enabled=true
      # Analytics configuration
      - Analytics__EnableDualWrite=true
      - Analytics__UseInfluxForAdminDashboard=true
      - API_BASE_URL=http://192.168.254.181:8080
    volumes:
      - /Users/michael/Repos/Yapplr/uploads:/app/uploads
      - yapplr_logs:/app/logs
    restart: unless-stopped
    networks:
      - yapplr-network
    depends_on:
      postgres:
        condition: service_healthy
      content-moderation:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
      influxdb:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s

  yapplr-video-processor:
    build:
      context: .
      dockerfile: Yapplr.VideoProcessor/Dockerfile
    image: yapplr-video-processor:local
    environment:
      - DOTNET_ENVIRONMENT=Development
      # RabbitMQ configuration
      - RabbitMQ__Host=rabbitmq
      - RabbitMQ__Port=5672
      - RabbitMQ__Username=yapplr
      - RabbitMQ__Password=yapplr123
      - RabbitMQ__VirtualHost=/
      # Video processing configuration
      - VideoProcessing__InputPath=/app/uploads/videos
      - VideoProcessing__OutputPath=/app/uploads/processed
      - VideoProcessing__ThumbnailPath=/app/uploads/thumbnails
      - VideoProcessing__TempPath=/app/uploads/temp
      - VideoProcessing__DeleteOriginalAfterProcessing=false

      - VideoProcessing__MaxDurationSeconds=300
      - VideoProcessing__VideoCodec=libx264
      - VideoProcessing__AudioCodec=aac
      # FFmpeg configuration
      - FFmpeg__BinaryPath=/usr/bin/ffmpeg
      - FFmpeg__WorkingDirectory=/tmp
      - FFmpeg__TimeoutSeconds=300
      - FFmpeg__EnableHardwareAcceleration=false
      - FFmpeg__LogLevel=info
      # HandBrake configuration
      - HandBrake__BinaryPath=/usr/bin/HandBrakeCLI
      - HandBrake__WorkingDirectory=/tmp
      - HandBrake__TimeoutSeconds=300
      - HandBrake__LogLevel=info
    volumes:
      - /Users/michael/Repos/Yapplr/uploads:/app/uploads
      - yapplr_logs:/app/logs
    restart: unless-stopped
    networks:
      - yapplr-network
    depends_on:
      rabbitmq:
        condition: service_healthy

  yapplr-frontend:
    build:
      context: yapplr-frontend
      dockerfile: Dockerfile
      args:
        # Use host.docker.internal for browser access (client-side)
        - NEXT_PUBLIC_API_URL=http://localhost:8080
        # Notification provider configuration (SignalR-only for local web)
        - NEXT_PUBLIC_ENABLE_SIGNALR=true
        # Force rebuild by passing current timestamp
        - CACHE_BUST=$(date +%s)
    environment:
      # Client-side API URL (for browser requests)
      - NEXT_PUBLIC_API_URL=http://localhost:8080
      - NEXT_PUBLIC_ENABLE_SIGNALR=true
      # Internal API URL for server-side operations (image optimization)
      - INTERNAL_API_URL=http://yapplr-api:8080
    image: yapplr-frontend:local
    ports:
      - "3001:3000"  # Expose frontend for local access
    restart: unless-stopped
    networks:
      - yapplr-network

  content-moderation:
    build:
      context: sentiment-analysis
      dockerfile: Dockerfile
    image: content-moderation:local
    environment:
      - PORT=8000
    restart: unless-stopped
    networks:
      - yapplr-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  postgres:
    image: postgres:16-alpine
    ports:
      - "5433:5432"  # Use different external port to avoid conflict with local PostgreSQL
    environment:
      - POSTGRES_DB=yapplr_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=localdev123
      # Security: Only allow connections from Docker network
      - POSTGRES_HOST_AUTH_METHOD=md5
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - yapplr-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d yapplr_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  rabbitmq:
    image: rabbitmq:3.13-management-alpine
    ports:
      - "5672:5672"   # AMQP port
      - "15672:15672" # Management UI
    environment:
      - RABBITMQ_DEFAULT_USER=yapplr
      - RABBITMQ_DEFAULT_PASS=yapplr123
      - RABBITMQ_DEFAULT_VHOST=/
      - RABBITMQ_CONFIG_FILE=/etc/rabbitmq/rabbitmq
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - ./config/rabbitmq/rabbitmq-basic.conf:/etc/rabbitmq/rabbitmq.conf:ro
    restart: unless-stopped
    networks:
      - yapplr-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  redis:
    image: redis:7.2-alpine
    ports:
      - "6380:6379"  # Use different external port to avoid conflict with local Redis
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - yapplr-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru

  # Analytics Stack
  influxdb:
    image: influxdb:2.7-alpine
    ports:
      - "8086:8086"  # InfluxDB API
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=yapplr
      - DOCKER_INFLUXDB_INIT_PASSWORD=yapplr123
      - DOCKER_INFLUXDB_INIT_ORG=yapplr
      - DOCKER_INFLUXDB_INIT_BUCKET=analytics
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=yapplr-analytics-token-local-dev-only
    volumes:
      - influxdb_data:/var/lib/influxdb2
      - influxdb_config:/etc/influxdb2
    restart: unless-stopped
    networks:
      - yapplr-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8086/ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  prometheus:
    image: prom/prometheus:v2.48.0
    ports:
      - "9090:9090"  # Prometheus UI
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    volumes:
      - ./analytics/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    restart: unless-stopped
    networks:
      - yapplr-network
    depends_on:
      - yapplr-api
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  grafana:
    image: grafana/grafana:10.2.0
    ports:
      - "3002:3000"  # Grafana UI (avoid conflict with frontend on 3001)
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=yapplr123
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./analytics/grafana/provisioning-local:/etc/grafana/provisioning
      - ./analytics/grafana/dashboards:/var/lib/grafana/dashboards
    restart: unless-stopped
    networks:
      - yapplr-network
    depends_on:
      - prometheus
      - influxdb
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Seq - Structured logging for .NET applications
  seq:
    image: datalust/seq:2024.1
    ports:
      - "5341:80"
    environment:
      - ACCEPT_EULA=Y
    restart: unless-stopped
    networks:
      - yapplr-network
    healthcheck:
      test: ["CMD-SHELL", "timeout 5 bash -c '</dev/tcp/localhost/80' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

volumes:
  yapplr_logs:
  postgres_data:
  rabbitmq_data:
  redis_data:
  influxdb_data:
  influxdb_config:
  prometheus_data:
  grafana_data:
  seq_data:

networks:
  yapplr-network:
    driver: bridge
