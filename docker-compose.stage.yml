

services:
  yapplr-api:
    build:
      context: Yapplr.Api
      dockerfile: Dockerfile
    image: yapplr-api:latest
    environment:
      - ASPNETCORE_ENVIRONMENT=Staging
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=yapplr_db;Username=postgres;Password=postgres
      - JwtSettings__SecretKey=${STAGE_JWT_SECRET_KEY}
      - JwtSettings__Issuer=Yapplr.Api
      - JwtSettings__Audience=Yapplr.Client
      - JwtSettings__ExpirationInMinutes=60
      # SendGrid configuration
      - SendGridSettings__ApiKey=${STAGE_SENDGRID_API_KEY}
      - SendGridSettings__FromEmail=${STAGE_SENDGRID_FROM_EMAIL}
      - SendGridSettings__FromName=${STAGE_SENDGRID_FROM_NAME}
      # Email provider selection
      - EmailProvider=${STAGE_EMAIL_PROVIDER}
      # Firebase configuration (REQUIRED for notifications)
      - Firebase__ProjectId=${STAGE_FIREBASE_PROJECT_ID}
      - Firebase__ServiceAccountKey=${STAGE_FIREBASE_SERVICE_ACCOUNT_KEY}
      # Content Moderation configuration
      - ContentModeration__ServiceUrl=http://content-moderation:8000
      - ContentModeration__Enabled=true
      - ContentModeration__AutoApplyTags=false
    volumes:
      - yapplr_uploads:/app/uploads
      - /etc/letsencrypt:/etc/letsencrypt:ro
    restart: unless-stopped
    networks:
      - yapplr-network
    depends_on:
      postgres:
        condition: service_healthy
      content-moderation:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s

  yapplr-frontend:
    build:
      context: yapplr-frontend
      dockerfile: Dockerfile
      args:
        - NEXT_PUBLIC_API_URL=https://${STAGE_API_DOMAIN_NAME:-stg-api.yapplr.com}
        # Notification provider configuration (SignalR-only for production web)
        - NEXT_PUBLIC_ENABLE_SIGNALR=true
        # Force rebuild by passing current timestamp
        - CACHE_BUST=${CACHE_BUST:-$(date +%s)}
    image: yapplr-frontend:latest
    restart: unless-stopped
    networks:
      - yapplr-network

  content-moderation:
    build:
      context: sentiment-analysis
      dockerfile: Dockerfile
    image: content-moderation:latest
    environment:
      - PORT=8000
    restart: unless-stopped
    networks:
      - yapplr-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.stage.conf:/etc/nginx/nginx.conf:ro
      - /etc/letsencrypt:/etc/letsencrypt:ro
      - /var/www/certbot:/var/www/certbot
    # No dependencies - nginx can start independently and handle service availability gracefully
    restart: unless-stopped
    networks:
      - yapplr-network

  # Certbot service for certificate generation (run manually when needed)
  # To generate certificates: docker compose -f docker-compose.stage.yml run --rm certbot
  certbot:
    image: certbot/certbot
    volumes:
      - /etc/letsencrypt:/etc/letsencrypt
      - /var/www/certbot:/var/www/certbot
    command: certbot certonly --webroot --webroot-path=/var/www/certbot --email ${STAGE_CERTBOT_EMAIL:-admin@yapplr.com} --agree-tos --no-eff-email -d stg-api.yapplr.com -d stg.yapplr.com
    profiles:
      - tools

  postgres:
    image: postgres:16-alpine
    environment:
      - POSTGRES_DB=yapplr_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - yapplr-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d yapplr_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

volumes:
  yapplr_uploads:

networks:
  yapplr-network:
    driver: bridge
