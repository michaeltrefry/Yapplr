

services:
  yapplr-api:
    build:
      context: .
      dockerfile: Yapplr.Api/Dockerfile
      cache_from:
        - yapplr-api:latest
        - yapplr-api:cache
    image: yapplr-api:${YAPPLR_API_VERSION:-latest}
    environment:
      - ASPNETCORE_ENVIRONMENT=Staging
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=yapplr_db;Username=postgres;Password=${STAGE_POSTGRES_PASSWORD}
      - JwtSettings__SecretKey=${STAGE_JWT_SECRET_KEY}
      - JwtSettings__Issuer=Yapplr.Api
      - JwtSettings__Audience=Yapplr.Client
      - JwtSettings__ExpirationInMinutes=60
      # SendGrid configuration
      - SendGridSettings__ApiKey=${STAGE_SENDGRID_API_KEY}
      - SendGridSettings__FromEmail=${STAGE_SENDGRID_FROM_EMAIL}
      - SendGridSettings__FromName=${STAGE_SENDGRID_FROM_NAME}
      # Email provider selection
      - EmailProvider=${STAGE_EMAIL_PROVIDER}
      # Firebase configuration (REQUIRED for notifications)
      - Firebase__ProjectId=${STAGE_FIREBASE_PROJECT_ID}
      - Firebase__ServiceAccountKey=${STAGE_FIREBASE_SERVICE_ACCOUNT_KEY}
      # Content Moderation configuration
      - ContentModeration__ServiceUrl=http://content-moderation:8000
      - ContentModeration__Enabled=true
      - ContentModeration__AutoApplyTags=false
      # RabbitMQ configuration
      - RabbitMQ__Host=rabbitmq
      - RabbitMQ__Port=5672
      - RabbitMQ__Username=${STAGE_RABBITMQ_USERNAME:-yapplr}
      - RabbitMQ__Password=${STAGE_RABBITMQ_PASSWORD:-yapplr123}
      - RabbitMQ__VirtualHost=/
      # SignalR configuration
      - NotificationProviders__SignalR__Enabled=true
      - NotificationProviders__SignalR__MaxConnectionsPerUser=10
      - NotificationProviders__SignalR__MaxTotalConnections=10000
      - NotificationProviders__SignalR__EnableDetailedErrors=false
      # Upload configuration - override to use Docker volume path
      - Uploads__BasePath=/app/uploads
      # Redis configuration
      - Redis__ConnectionString=${STAGE_REDIS_CONNECTION_STRING}
      # InfluxDB configuration
      - InfluxDB__Url=http://influxdb:8086
      - InfluxDB__Token=${STAGE_INFLUXDB_TOKEN:-yapplr-analytics-token-staging}
      - InfluxDB__Organization=${STAGE_INFLUXDB_ORG:-yapplr}
      - InfluxDB__Bucket=${STAGE_INFLUXDB_BUCKET:-analytics}
      - InfluxDB__Enabled=true
      # Analytics configuration
      - Analytics__EnableDualWrite=true
      - Analytics__UseInfluxForAdminDashboard=true
      # Tenor GIF API configuration
      - Tenor__ApiKey=${STAGE_TENOR_API_KEY}
    volumes:
      - yapplr_uploads:/app/uploads
      - yapplr_logs:/app/logs
      - /etc/letsencrypt:/etc/letsencrypt:ro
    restart: unless-stopped
    networks:
      - yapplr-network
    depends_on:
      postgres:
        condition: service_healthy
      content-moderation:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
      influxdb:
        condition: service_healthy
      seq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://yapplr-api:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s

  yapplr-video-processor:
    build:
      context: .
      dockerfile: Yapplr.VideoProcessor/Dockerfile
      cache_from:
        - yapplr-video-processor:latest
        - yapplr-video-processor:cache
    image: yapplr-video-processor:${YAPPLR_VIDEO_PROCESSOR_VERSION:-latest}
    environment:
      - DOTNET_ENVIRONMENT=Staging
      # RabbitMQ configuration
      - RabbitMQ__Host=rabbitmq
      - RabbitMQ__Port=5672
      - RabbitMQ__Username=${STAGE_RABBITMQ_USERNAME:-yapplr}
      - RabbitMQ__Password=${STAGE_RABBITMQ_PASSWORD:-yapplr123}
      - RabbitMQ__VirtualHost=/
      # Video processing configuration
      - VideoProcessing__InputPath=/app/uploads/videos
      - VideoProcessing__OutputPath=/app/uploads/processed
      - VideoProcessing__ThumbnailPath=/app/uploads/thumbnails
      - VideoProcessing__TempPath=/app/uploads/temp
      - VideoProcessing__DeleteOriginalAfterProcessing=true

      - VideoProcessing__MaxDurationSeconds=300
      - VideoProcessing__VideoCodec=libx264
      - VideoProcessing__AudioCodec=aac
      # FFmpeg configuration
      - FFmpeg__BinaryPath=/usr/bin/ffmpeg
      - FFmpeg__WorkingDirectory=/tmp
      - FFmpeg__TimeoutSeconds=300
      - FFmpeg__EnableHardwareAcceleration=false
      - FFmpeg__LogLevel=info
      # HandBrake configuration
      - HandBrake__BinaryPath=/usr/bin/HandBrakeCLI
      - HandBrake__WorkingDirectory=/tmp
      - HandBrake__TimeoutSeconds=300
      - HandBrake__LogLevel=info
    volumes:
      - yapplr_uploads:/app/uploads
      - yapplr_logs:/app/logs
    restart: unless-stopped
    networks:
      - yapplr-network
    depends_on:
      rabbitmq:
        condition: service_healthy

  yapplr-frontend:
    build:
      context: yapplr-frontend
      dockerfile: Dockerfile
      cache_from:
        - yapplr-frontend:latest
        - yapplr-frontend:cache
      args:
        - NEXT_PUBLIC_API_URL=https://${STAGE_API_DOMAIN_NAME:-stg-api.yapplr.com}
        # Notification provider configuration (SignalR-only for production web)
        - NEXT_PUBLIC_ENABLE_SIGNALR=true
        # Force rebuild by passing current timestamp
        - CACHE_BUST=${CACHE_BUST:-$(date +%s)}
    image: yapplr-frontend:${YAPPLR_FRONTEND_VERSION:-latest}
    restart: unless-stopped
    networks:
      - yapplr-network

  content-moderation:
    build:
      context: sentiment-analysis
      dockerfile: Dockerfile
      cache_from:
        - content-moderation:latest
        - content-moderation:cache
    image: content-moderation:${CONTENT_MODERATION_VERSION:-latest}
    environment:
      - PORT=8000
    restart: unless-stopped
    networks:
      - yapplr-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://content-moderation:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.stage.conf:/etc/nginx/nginx.conf:ro
      - /etc/letsencrypt:/etc/letsencrypt:ro
      - /var/www/certbot:/var/www/certbot
    # No dependencies - nginx can start independently and handle service availability gracefully
    restart: unless-stopped
    networks:
      - yapplr-network

  postgres:
    image: postgres:16-alpine
    environment:
      - POSTGRES_DB=yapplr_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${STAGE_POSTGRES_PASSWORD}
      # Security: Only allow connections from Docker network
      - POSTGRES_HOST_AUTH_METHOD=md5
    # No external ports exposed - only accessible from Docker network
    restart: unless-stopped
    networks:
      - yapplr-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d yapplr_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  rabbitmq:
    image: rabbitmq:3.13-management-alpine
    user: "999:999"  # RabbitMQ user ID to fix volume permissions
    environment:
      - RABBITMQ_DEFAULT_USER=${STAGE_RABBITMQ_USERNAME:-yapplr}
      - RABBITMQ_DEFAULT_PASS=${STAGE_RABBITMQ_PASSWORD:-yapplr123}
      - RABBITMQ_DEFAULT_VHOST=/
      # Use configuration file instead of deprecated environment variables
      - RABBITMQ_CONFIG_FILE=/etc/rabbitmq/rabbitmq
    # No external ports exposed - accessed through nginx proxy for security
    # AMQP port (5672) and Management UI (15672) only accessible from Docker network
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - ./config/rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:ro
    restart: unless-stopped
    networks:
      - yapplr-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 15s
      retries: 8
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1GB
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  redis:
    image: redis:7.2-alpine
    command: redis-server --maxmemory 256mb --maxmemory-policy allkeys-lru --save 60 1000
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - yapplr-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Analytics Stack
  influxdb:
    image: influxdb:2.7-alpine
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=${STAGE_INFLUXDB_USER:-yapplr}
      - DOCKER_INFLUXDB_INIT_PASSWORD=${STAGE_INFLUXDB_PASSWORD:-yapplr123}
      - DOCKER_INFLUXDB_INIT_ORG=${STAGE_INFLUXDB_ORG:-yapplr}
      - DOCKER_INFLUXDB_INIT_BUCKET=${STAGE_INFLUXDB_BUCKET:-analytics}
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=${STAGE_INFLUXDB_TOKEN:-yapplr-analytics-token-staging}
    volumes:
      - influxdb_data:/var/lib/influxdb2
      - influxdb_config:/etc/influxdb2
    restart: unless-stopped
    networks:
      - yapplr-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://influxdb:8086/ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  prometheus:
    image: prom/prometheus:v2.48.0
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    volumes:
      - ./analytics/prometheus.staging.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    restart: unless-stopped
    networks:
      - yapplr-network
    depends_on:
      - yapplr-api
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://prometheus:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  grafana:
    image: grafana/grafana:10.2.0
    environment:
      - GF_SECURITY_ADMIN_USER=${STAGE_GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${STAGE_GRAFANA_PASSWORD:-yapplr123}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
      - GF_SERVER_DOMAIN=${STAGE_GRAFANA_DOMAIN:-stg-grafana.yapplr.com}
      - GF_SERVER_ROOT_URL=https://${STAGE_GRAFANA_DOMAIN:-stg-grafana.yapplr.com}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./analytics/grafana/provisioning-staging:/etc/grafana/provisioning
      - ./analytics/grafana/dashboards:/var/lib/grafana/dashboards
    restart: unless-stopped
    networks:
      - yapplr-network
    depends_on:
      - prometheus
      - influxdb
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://grafana:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Seq - Structured logging for .NET applications
  seq:
    image: datalust/seq:2024.1
    ports:
      - "5341:80"  # Expose Seq UI for staging debugging
    environment:
      - ACCEPT_EULA=Y
    volumes:
      - seq_data:/data
    restart: unless-stopped
    networks:
      - yapplr-network
    healthcheck:
      test: ["CMD-SHELL", "timeout 5 bash -c '</dev/tcp/localhost/80' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

volumes:
  yapplr_uploads:
  yapplr_logs:
  rabbitmq_data:
  redis_data:
  influxdb_data:
  influxdb_config:
  prometheus_data:
  grafana_data:
  seq_data:

networks:
  yapplr-network:
    driver: bridge
