

services:
  yapplr-api:
    build:
      context: .
      dockerfile: Yapplr.Api/Dockerfile
    image: yapplr-api:latest
    environment:
      - ASPNETCORE_ENVIRONMENT=Staging
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=yapplr_db;Username=postgres;Password=${STAGE_POSTGRES_PASSWORD}
      - JwtSettings__SecretKey=${STAGE_JWT_SECRET_KEY}
      - JwtSettings__Issuer=Yapplr.Api
      - JwtSettings__Audience=Yapplr.Client
      - JwtSettings__ExpirationInMinutes=60
      # SendGrid configuration
      - SendGridSettings__ApiKey=${STAGE_SENDGRID_API_KEY}
      - SendGridSettings__FromEmail=${STAGE_SENDGRID_FROM_EMAIL}
      - SendGridSettings__FromName=${STAGE_SENDGRID_FROM_NAME}
      # Email provider selection
      - EmailProvider=${STAGE_EMAIL_PROVIDER}
      # Firebase configuration (REQUIRED for notifications)
      - Firebase__ProjectId=${STAGE_FIREBASE_PROJECT_ID}
      - Firebase__ServiceAccountKey=${STAGE_FIREBASE_SERVICE_ACCOUNT_KEY}
      # Content Moderation configuration
      - ContentModeration__ServiceUrl=http://content-moderation:8000
      - ContentModeration__Enabled=true
      - ContentModeration__AutoApplyTags=false
      # RabbitMQ configuration
      - RabbitMQ__Host=rabbitmq
      - RabbitMQ__Port=5672
      - RabbitMQ__Username=${STAGE_RABBITMQ_USERNAME:-yapplr}
      - RabbitMQ__Password=${STAGE_RABBITMQ_PASSWORD:-yapplr123}
      - RabbitMQ__VirtualHost=/
      # SignalR configuration
      - NotificationProviders__SignalR__Enabled=true
      - NotificationProviders__SignalR__MaxConnectionsPerUser=10
      - NotificationProviders__SignalR__MaxTotalConnections=10000
      - NotificationProviders__SignalR__EnableDetailedErrors=false
      # Upload configuration - override to use Docker volume path
      - Uploads__BasePath=/app/uploads
      # Redis configuration
      - Redis__ConnectionString=${STAGE_REDIS_CONNECTION_STRING}
    volumes:
      - yapplr_uploads:/app/uploads
      - /etc/letsencrypt:/etc/letsencrypt:ro
    restart: unless-stopped
    networks:
      - yapplr-network
    depends_on:
      postgres:
        condition: service_healthy
      content-moderation:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s

  yapplr-video-processor:
    build:
      context: .
      dockerfile: Yapplr.VideoProcessor/Dockerfile
    image: yapplr-video-processor:latest
    environment:
      - DOTNET_ENVIRONMENT=Staging
      # RabbitMQ configuration
      - RabbitMQ__Host=rabbitmq
      - RabbitMQ__Port=5672
      - RabbitMQ__Username=${STAGE_RABBITMQ_USERNAME:-yapplr}
      - RabbitMQ__Password=${STAGE_RABBITMQ_PASSWORD:-yapplr123}
      - RabbitMQ__VirtualHost=/
      # Video processing configuration
      - VideoProcessing__InputPath=/app/uploads/videos
      - VideoProcessing__OutputPath=/app/uploads/processed
      - VideoProcessing__ThumbnailPath=/app/uploads/thumbnails
      - VideoProcessing__TempPath=/app/uploads/temp
      - VideoProcessing__DeleteOriginalAfterProcessing=true
      - VideoProcessing__MaxFileSizeBytes=104857600
      - VideoProcessing__MaxDurationSeconds=300
      - VideoProcessing__VideoCodec=libx264
      - VideoProcessing__AudioCodec=aac
      # FFmpeg configuration
      - FFmpeg__BinaryPath=/usr/bin/ffmpeg
      - FFmpeg__WorkingDirectory=/tmp
      - FFmpeg__TimeoutSeconds=300
      - FFmpeg__EnableHardwareAcceleration=false
      - FFmpeg__LogLevel=info
    volumes:
      - yapplr_uploads:/app/uploads
    restart: unless-stopped
    networks:
      - yapplr-network
    depends_on:
      rabbitmq:
        condition: service_healthy

  yapplr-frontend:
    build:
      context: yapplr-frontend
      dockerfile: Dockerfile
      args:
        - NEXT_PUBLIC_API_URL=https://${STAGE_API_DOMAIN_NAME:-stg-api.yapplr.com}
        # Notification provider configuration (SignalR-only for production web)
        - NEXT_PUBLIC_ENABLE_SIGNALR=true
        # Force rebuild by passing current timestamp
        - CACHE_BUST=${CACHE_BUST:-$(date +%s)}
    image: yapplr-frontend:latest
    restart: unless-stopped
    networks:
      - yapplr-network

  content-moderation:
    build:
      context: sentiment-analysis
      dockerfile: Dockerfile
    image: content-moderation:latest
    environment:
      - PORT=8000
    restart: unless-stopped
    networks:
      - yapplr-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
      - "15672:15672"  # RabbitMQ Management UI (staging only)
    volumes:
      - ./nginx.stage.conf:/etc/nginx/nginx.conf:ro
      - /etc/letsencrypt:/etc/letsencrypt:ro
      - /var/www/certbot:/var/www/certbot
    # No dependencies - nginx can start independently and handle service availability gracefully
    restart: unless-stopped
    networks:
      - yapplr-network

  postgres:
    image: postgres:16-alpine
    environment:
      - POSTGRES_DB=yapplr_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${STAGE_POSTGRES_PASSWORD}
      # Security: Only allow connections from Docker network
      - POSTGRES_HOST_AUTH_METHOD=md5
    # No external ports exposed - only accessible from Docker network
    restart: unless-stopped
    networks:
      - yapplr-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d yapplr_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  rabbitmq:
    image: rabbitmq:3.13-management-alpine
    environment:
      - RABBITMQ_DEFAULT_USER=${STAGE_RABBITMQ_USERNAME:-yapplr}
      - RABBITMQ_DEFAULT_PASS=${STAGE_RABBITMQ_PASSWORD:-yapplr123}
      - RABBITMQ_DEFAULT_VHOST=/
    # No external ports exposed - accessed through nginx proxy for security
    # AMQP port (5672) and Management UI (15672) only accessible from Docker network
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    restart: unless-stopped
    networks:
      - yapplr-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  redis:
    image: redis:7.2-alpine
    command: redis-server --maxmemory 256mb --maxmemory-policy allkeys-lru --save 60 1000
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - yapplr-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

volumes:
  yapplr_uploads:
  rabbitmq_data:
  redis_data:

networks:
  yapplr-network:
    driver: bridge
