version: '3.8'

services:
  yapplr-api:
    build:
      context: Yapplr.Api
      dockerfile: Dockerfile
    image: yapplr-api:latest
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ConnectionStrings__DefaultConnection=${PROD_DATABASE_CONNECTION_STRING}
      - JwtSettings__SecretKey=${PROD_JWT_SECRET_KEY}
      - JwtSettings__Issuer=Yapplr.Api
      - JwtSettings__Audience=Yapplr.Client
      - JwtSettings__ExpirationInMinutes=60
      # SendGrid configuration
      - SendGridSettings__ApiKey=${PROD_SENDGRID_API_KEY}
      - SendGridSettings__FromEmail=${PROD_SENDGRID_FROM_EMAIL}
      - SendGridSettings__FromName=${PROD_SENDGRID_FROM_NAME}
      # Email provider selection
      - EmailProvider=${PROD_EMAIL_PROVIDER}
      # Firebase configuration (REQUIRED for notifications)
      - Firebase__ProjectId=${PROD_FIREBASE_PROJECT_ID}
      - Firebase__ServiceAccountKey=${PROD_FIREBASE_SERVICE_ACCOUNT_KEY}
    volumes:
      - yapplr_uploads:/app/uploads
      - /etc/letsencrypt:/etc/letsencrypt:ro
    restart: unless-stopped
    networks:
      - yapplr-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  yapplr-frontend:
    build:
      context: yapplr-frontend
      dockerfile: Dockerfile
      args:
        - NEXT_PUBLIC_API_URL=https://${PROD_API_DOMAIN_NAME}
        # Notification provider configuration (SignalR-only for production web)
        - NEXT_PUBLIC_ENABLE_SIGNALR=true
        # Force rebuild by passing current timestamp
        - CACHE_BUST=${CACHE_BUST:-$(date +%s)}
    image: yapplr-frontend:latest
    restart: unless-stopped
    networks:
      - yapplr-network

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - /etc/letsencrypt:/etc/letsencrypt:ro
      - /var/www/certbot:/var/www/certbot
    # No dependencies - nginx can start independently and handle service availability gracefully
    restart: unless-stopped
    networks:
      - yapplr-network

  certbot:
    image: certbot/certbot
    volumes:
      - /etc/letsencrypt:/etc/letsencrypt
      - /var/www/certbot:/var/www/certbot
    command: certbot certonly --manual --preferred-challenges=dns --email ${PROD_CERTBOT_EMAIL} --server https://acme-v02.api.letsencrypt.org/directory --agree-tos -d ${PROD_CERTBOT_DOMAIN} -d yapplr.com

volumes:
  yapplr_uploads:

networks:
  yapplr-network:
    driver: bridge
